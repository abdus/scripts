#!/bin/bash

# this script is for managing my passwords. basically it decrypt and reads
# passwords from a gpg-encrypted files and copy passwords into system clipboard.
# if it can't find a password or there are multiple passwords for a system,
# script will show an appropriate notification.

# deps:
#   - gpg
#   - mako and notify-send
#   - wl-clipboard

# encrypted file location: ~/.passwords.gpg

# plaintext password file format:
# domain        username          password
# google.com    mail@google.com   sdnfn3o344%*

#         USAGE
# +++++++++++++++++++++
# list all available entries: passwd-mg list
# get a password            : passwd-mg get REGEX
# add a new entry to file   : passwd-mg add DOMAIN EMAIL PASSWORD
# remove entries            : passwd-mg rm REGEX

# regex is the thing this password manager heavily depends on. so, in-case
# you don't know regex, please loog it up on google/duckduckgo





# RIVISION HISTORY
# 
# --> ee5ec2c new scripts
# --> 0c3117d add new scripts
# --> b8afe77 passwd-mg add 'rm' functionality
# --> 7c609db :fire: password-manager


set -e

GPG_KEYID="0xEB3966E37BA3DFD8"

# check if gpg key for `KEYID` exists
gpg --list-keys "$GPG_KEYID" >/dev/null 2>&1

# `$?` stores the exit code of last command
if [[ $? != "0" ]]; then
  echo "Key for $GPG_KEYID could not be found"
  exit 2
fi

if [[ ! -f ~/.passwords.gpg ]]; then
  printf '' | gpg -r "$GPG_KEYID" --armor --encrypt
fi

function get_pass() {
  if [[ -z "$1" ]]; then
    notify-send "I don't know what to search for" -i tux
  fi

  passwords="$(gpg --decrypt ~/.passwords.gpg 2>/dev/null |
    grep --regexp="$1" |
    awk '{print $2 "     " $3}')"

  number_of_passwds=$(printf '%s\n' "$passwords" | wc -l)

  if [[ "$number_of_passwds" -le "0" ]]; then
    notify-send "No password found" -i tux
  elif [[ "$number_of_passwds" -eq "1" ]]; then
    printf '%s\n' "$passwords" | awk '{print $2}' | wl-copy
    notify-send "Password copied to clipboard" -i tux
  else
    notify-send \
      "$number_of_passwds passwords copied to clipboard. Make sure to check before use" \
      -i tux

    echo "$passwords" | wl-copy
  fi
}

# add a new password to encrypted file
# steps: get password from user, decrypt file, append new password to file, encrypt, write back

function add_pass() {
  if [[ -z $1 ]]; then
    notify-send "You forgot to provide domain name" -i tux
  elif [[ -z $2 ]]; then
    notify-send "You forgot to provide username" -i tux
  elif [[ -z "$3" ]]; then
    notify-send "You forgot to provide password" -i tux
  fi

  gpg_stuff=$(gpg --decrypt ~/.passwords.gpg 2>/dev/null)

  printf '%s\n' "$gpg_stuff" |
    sed -e "\$a\\$(printf '%-34s' $1)$(printf '%-34s' $2)$3" |
    gpg -r "$GPG_KEYID" --armor --output ~/.passwords.gpg --encrypt 2>/dev/null |

  notify-send "Saved New Password." -i tux
}

# list pass
function list_entries() {
  selected_entry=$(
    gpg --decrypt ~/.passwords.gpg 2>/dev/null |
      awk '{$1=sprintf("%-34s", $1);$3=""}1'
  )

  printf '%s\n' "$selected_entry"
}

# delete an entry based on regex
function delete_entry() {
  REGEX="$1"

  printf "
---------------------------------
Following entries will be removed
---------------------------------
"

  gpg --decrypt ~/.passwords.gpg 2>/dev/null |
    grep --regexp="$REGEX" |
    awk '{print $1 "  " $2}'

  printf '%s\n' "---------------------------------"
  read -p "Do you want to delete? (yes/[no]): " should_delete
  printf '%s\n' "---------------------------------"

  if [[ "$should_delete" == "yes" ]]; then
    gpg --decrypt ~/.passwords.gpg 2>/dev/null |
      sed "/$REGEX/d" |
      gpg -r "$GPG_KEYID" --armor --output ~/.passwords.gpg --encrypt 2>/dev/null
    echo "Entries deleted Successfully!"
  else
    echo -e "Entries WON'T be deleted!"
  fi
  printf '%s\n' "---------------------------------"
}

# Generate passwords
function gen_pass() {
  chars='@#$%&_+='
  {
    LC_ALL=C grep </dev/urandom -ao '[A-Za-z0-9]' |
      head -n$((RANDOM % 8 + 9))
    echo ${chars:$((RANDOM % ${#chars}))} # Random special char.
  } |
    shuf |
    tr -d '\n'
  echo
}

# handler
if [[ "$1" == "get" ]]; then
  get_pass $2
elif [[ "$1" == "add" ]]; then
  add_pass $2 $3 $4
elif [[ "$1" == "list" ]]; then
  list_entries
elif [[ "$1" == "rm" ]]; then
  delete_entry $2
elif [[ "$1" == "gen" ]]; then
  gen_pass
fi
